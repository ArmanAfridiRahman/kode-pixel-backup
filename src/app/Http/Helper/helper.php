<?php

use App\Enums\PriorityStatus;
use App\Enums\StatusEnum;
use App\Enums\TicketStatus;
use App\Http\Services\FileService;
use App\Models\Ad;
use App\Models\Admin\Frontend;
use App\Models\Core\Language;
use Illuminate\Database\Eloquent\Casts\AsStringable;
use Illuminate\Support\Facades\Artisan;
use App\Models\Core\Setting;
use App\Models\Core\Translation;
use App\Models\Seo;
use Illuminate\Support\Facades\Cache;
use Carbon\Carbon;
use Illuminate\Support\Arr;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Response;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Route;
use Intervention\Image\Facades\Image;




   if(!function_exists('optimize_clear')){
      function optimize_clear(){
         // get bufferoutput which is generated by a any and store it in memory for later use
         $output = new \Symfony\Component\Console\Output\BufferedOutput();
         Artisan::call('optimize:clear', array(), $output);
         return $output->fetch();
      }
   }


   if (!function_exists('limit_words')) {
      function limit_words(string $text, int|string $limit) :string  {
         return Str::limit($text, $limit, $end='...');
      }
   }


   if (!function_exists('trx_number')) {
      function trx_number(int $length = 12) :string{
         $characters = 'ABCDEFGHJKMNOPQRSTUVWXYZ123456789';
         $charactersLength = strlen($characters);
         $randomString = '';
         for ($i = 0; $i < $length; $i++) {
            $randomString .= $characters[rand(0, $charactersLength - 1)];
         }
         return $randomString;
      }
   }



   if (!function_exists('limitText')) {

      /**
       * @param $text
       * @param $length
       * @return string
       */
      function limitText(string $text, int | string $length): string
      {
         return Str::limit($text, $length);
      }

  }

   if (!function_exists('formatAmount')) {
      function formatAmount(int | float $amount, int $precision  = 0) :int|float
      {
         return round($amount,$precision);
      }
   }


   if (!function_exists('clear_str')) {
      function format_str(string $text)
      {
         return preg_replace('/[^A-Za-z0-9\-]/', '', str_replace(' ', '_', $text));
      }

   }
   function markStatusUpdate($modelName, $status,$column, $ids){
      if($status == StatusEnum::true->status()){
         app(config('constants.options.admin_model_namespace').$modelName)::whereIn('id', $ids)->update([
            $column => StatusEnum::true->status(),
         ]);
      }
      else{
         app(config('constants.options.admin_model_namespace').$modelName)::whereIn('id', $ids)->update([
            $column => StatusEnum::false->status(),
         ]);
      }

  }

   if (!function_exists('site_settings')) {
      function site_settings(string  $key = null ,string $pluck = 'value'):string|array|null {

         $settings = Cache::remember('site_settings',24 * 60, function () use($pluck)  {
            return Setting::with(['file'])->pluck($pluck ,'key')->toArray();
         });

         try {
            if((isset($settings[$key]) ||  isset(config('site_settings')[$key]))){
               return  Arr::get($settings, $key,isset(config('site_settings')[$key]) ? config('site_settings')[$key] :Arr::get(config('language'),"no_result_found",""));
            }

         } catch (\Throwable $th) {

         }

         return Arr::get(config('language'),"no_result_found","");
      }
   }

   if (!function_exists('site_logo')) {
      function site_logo(string  $key):string|array|object|null {

         $settings = Cache::remember('site_logos',24 * 60, function ()   {
            return Setting::with(['file'])->whereIn("key",['site_logo','user_site_logo','site_favicon'])->get();
         });



         return ($settings->where('key',$key)->first());
      }
   }


   if (!function_exists('paginateNumber')) {
      function paginateNumber(){
         return site_settings('pagination_number');
      }
   }


   if (!function_exists('make_slug')){
      function make_slug(mixed $text) :mixed{
         $string  = preg_replace('/\s+/u','-', trim(strtolower($text)));
         $string = preg_replace('/-+/', '-', $string);
         $string = trim($string, '-');
         $string = strtolower($string);
         return  $string ;

      }
   }



   if (!function_exists('unauthorized_message')){
         function unauthorized_message(string $message='Unauthorized access') :string{
            return translate($message);
         }
   }

	if (!function_exists('get_system_locale')){
		function get_system_locale(){
         return session()->has('locale') ?  session()->get('locale') : App::getLocale();
		}
	}



   if (!function_exists('system_language')){
      function system_language(){
         return Language::active()->get();
      }
   }

	if (!function_exists('get_translation')){
		function get_translation(mixed $data, string $lang = null) :mixed{
			$lang = $lang ? $lang : session()->get("locale");
         if($data->$lang){
            return  $data->$lang;
         }
         return $data->en;

		}
	}


   if (!function_exists('sortByMonth')) {
      function sortByMonth($data){
         $months = ['January','February','March','April','May','June','July','August','September','October','November','December'];
         $sortedArray = [];
         foreach($months as $month){

            if(isset($data[$month])){
               $sortedArray[$month] = $data[$month];
            }


         }
         return $sortedArray;
      }
  }

  if (!function_exists('add_shortcode')) {
      function add_shortcode(string $slug) :mixed
      {
         $ad = Ad::with(['image'])->where("position",$slug)->where("status",StatusEnum::true->status())->first();
         if(!$ad){
            return false;
         }

         $url = imageUrl(config("settings")['file_path']['ad']['path']."/".@$ad->file->name ,@$ad->file->disk );
         $image = "<img class=\"ad-banner\" src=\"$url\" alt=\"ad-image.jpg\">";
         return $image;
      }
   }



	if (!function_exists('diff_for_humans')){
		function diff_for_humans(string  $date) :string
		{
			return Carbon::parse($date)->diffForHumans();
		}
   }


   if (!function_exists('formatPrice')){
		function formatPrice(mixed  $number) :mixed
		{
         if ($number >= 1000000) {
            $number =  number_format($number / 1000000, 1) . 'm';
         } elseif ($number >= 1000) {
            $number =  number_format($number / 1000, $number % 1000 === 0 ? 0 : 1) . 'k';
         } else {
            $number =  number_format($number);
         }

         return  $number. PHP_EOL;
		}
   }



   if (!function_exists('ticket_status')){
		function ticket_status(mixed  $status) :string
		{
         $class = "info";


         $prefixClass = "i-badge ";
         if(request()->routeIs('user.*')){
            $prefixClass ="badge bg-soft-";

         }

         if(TicketStatus::PENDING->value ==  $status){
            $status = translate("Pending");
            $class = "warning";
         }

         elseif(TicketStatus::OPEN->value ==  $status){
            $status = translate("Open");
            $class = "info";
         }

         elseif(TicketStatus::PROCESSING->value ==  $status){
            $status = translate("Processing");
            $class = "info";
         }
         elseif(TicketStatus::SOLVED->value ==  $status){
            $status = translate("Sloved");
            $class = "success";
         }
         elseif(TicketStatus::HOLD->value ==  $status){
            $status = translate("Hold");
            $class = "warning";
         }

         elseif(TicketStatus::CLOSED->value ==  $status){
            $status = translate("Closed");
            $class = "danger";
         }

        return "<span class=\"$prefixClass$class\">$status</span>";


		}
   }


   if (!function_exists('generateTicketNumber')){
      function generateTicketNumber() :string
      {
         $randomNumber = uniqid(); // Generate a unique identifier based on the current time
         $ticketNumber = strtoupper(substr($randomNumber, 0, 8));
         return $ticketNumber;
      }
  }



   if (!function_exists('priority_status')){
		function priority_status(mixed  $status) :string
		{
         $class = "info";

         $prefixClass = "i-badge ";
         if(request()->routeIs('user.*')){
            $prefixClass ="badge text--bg--";
         }

         if(PriorityStatus::URGENT->value ==  $status){
            $status = translate("Urgent");
            $class = "danger";
         }

         elseif(PriorityStatus::HIGH->value ==  $status){
            $status = translate("High");
            $class = "warning";
         }

         elseif(PriorityStatus::LOW->value ==  $status){
            $status = translate("Low");
            $class = "info";
         }
         elseif(PriorityStatus::MEDIUM->value ==  $status){
            $status = translate("Medium");
            $class = "success";
         }


        return "<span class=\"$prefixClass$class\">$status</span>";


		}
   }






	if (!function_exists('get_date_time')){
		function get_date_time(string $date,string $format = 'Y-m-d') :string
		{
			return Carbon::parse($date)->translatedFormat($format);
		}
    }

    if (!function_exists('generateOTP')){

      function generateOTP(int $min = 100000, int $max = 999999): int
      {
         $otpCode = rand($min, $max);

         return $otpCode;
      }
   }


    if (!function_exists('str_unique')) {

      function str_unique(int $length = 16): string
      {
         $side = rand(0,1);
         $salt = rand(0,9);
         $len = $length - 1;
         $string = Str::random($len <= 0 ? 7 : $len);

         $separatorPos = (int) ceil($length/4);

         $string = $side === 0 ? ($salt . $string) : ($string . $salt);
         $string = substr_replace($string, '-', $separatorPos, 0);

         return substr_replace($string, '-', negative_value($separatorPos), 0);
      }
   }

  if (!function_exists('negative_value')) {

      function negative_value(int|float $value, bool $float = false): int|float
      {
         if ($float) {
            $value = (float) $value;
         }
         return 0 - abs($value);
      }
  }


   //frornternd section
	if (!function_exists('frontend_section')){
		function frontend_section($slug = null) : mixed
		{
         $frontends = Cache::remember("frontend-data",now()->addHour(), function ()  {
            return Frontend::get();
         });

         return $frontends;
		}
	}

   if (!function_exists('frontend_section_data')) {
      function frontend_section_data($data,$type,$key ='value',$content_type = 'static_element')
      {
         $val = '';
         if(($data->$content_type->$type)){
            $val = $data->$content_type->$type->$key ;
         }
         return $val;
      }
  }


     //frornternd section
	if (!function_exists('seo_data')){
		function seo_data($key = null) : mixed
		{
         $seos = Cache::remember("seo-data",now()->addHour(), function ()  {
            return Seo::get();
         });

         if($key){
            return $seos->where('identifier',$key)->first();
         }

         return $seos;
		}
	}


   if (!function_exists('show_ratings')) {
      function show_ratings(int $ratings) :string
      {
         $str = "";
           for($i = 0 ; $i<5 ; $i++){
               if( $i < $ratings){
                  $str .= "<li><i class=\"fa-solid fa-star\"></i></li>";
               }
               else{
                  $str .= "<li><i class=\"fa-light fa-star\"></i></li>";
               }
           }

         return $str;
      }
  }



	if (!function_exists('translate')){
      function translate(string | null $keyWord, string $lang_code = null) :string
      {
         try {
            $lang_code = $lang_code ? $lang_code : App::getLocale();
            $lang_key = preg_replace('/[^A-Za-z0-9\_]/', '', str_replace(' ', '_', strtolower($keyWord)));
            $translate_data = Cache::remember('translations-'.$lang_code,now()->addHour(), function () use($lang_code) {
               return Translation::where('code', $lang_code)->pluck('value', 'key')->toArray();
            });

            if (!array_key_exists($lang_key,$translate_data)) {
               $translate_val = str_replace(array("\r", "\n", "\r\n"), "", $keyWord);
               Translation::create([
                  'code'=>$lang_code,
                  'key'=> $lang_key,
                  'value'=> $translate_val
               ]);
               $keyWord = $translate_val;
               Cache::forget('translations-'.$lang_code);
            }

            else{
               $keyWord = $translate_data[$lang_key];
            }

         } catch (\Throwable $th) {

         }

         return strip_tags($keyWord);
      }
   }


    if (!function_exists('auth_user')){

        function auth_user(){
            if(request()->routeIs('staff.*')){
                return auth()->guard('staff')->user();
            }
            else{
                return auth()->guard('admin')->user();
            }
        }


    }


   if (!function_exists('response_status')){
      function response_status(string $message = 'Sucessfully Completed' ,string $key = 'success') :array{
         return [
         $key =>  translate($message)
         ];
      }
   }



   if (!function_exists('get_address_by_ip')) {
      function get_address_by_ip(string $client_ip) :string
      {
         $url = "http://ip-api.com/json/$client_ip";
         $address_data = json_decode(file_get_contents($url),true);
         return $address_data;
      }
  }



   if (!function_exists('get_ip_info')){
      function get_ip_info() :array
      {
         $ip = null;
         $deep_detect = TRUE;
         if (filter_var($ip, FILTER_VALIDATE_IP) === FALSE) {
            $ip = $_SERVER["REMOTE_ADDR"];
            if ($deep_detect) {
               if (filter_var(@$_SERVER['HTTP_X_FORWARDED_FOR'], FILTER_VALIDATE_IP))
                  $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];
               if (filter_var(@$_SERVER['HTTP_CLIENT_IP'], FILTER_VALIDATE_IP))
                  $ip = $_SERVER['HTTP_CLIENT_IP'];
            }
         }
         $xml = @simplexml_load_file("http://www.geoplugin.net/xml.gp?ip=" . $ip);

         $country = @$xml->geoplugin_countryName;
         $city = @$xml->geoplugin_city;
         $area = @$xml->geoplugin_areaCode;
         $code = @$xml->geoplugin_countryCode;
         $long = @$xml->geoplugin_longitude;
         $lat = @$xml->geoplugin_latitude;


         $user_agent = $_SERVER['HTTP_USER_AGENT'];
         $os_platform = "Unknown OS Platform";
         $os_array = array(
            '/windows nt 10/i' => 'Windows 10',
            '/windows nt 6.3/i' => 'Windows 8.1',
            '/windows nt 6.2/i' => 'Windows 8',
            '/windows nt 6.1/i' => 'Windows 7',
            '/windows nt 6.0/i' => 'Windows Vista',
            '/windows nt 5.2/i' => 'Windows Server 2003/XP x64',
            '/windows nt 5.1/i' => 'Windows XP',
            '/windows xp/i' => 'Windows XP',
            '/windows nt 5.0/i' => 'Windows 2000',
            '/windows me/i' => 'Windows ME',
            '/win98/i' => 'Windows 98',
            '/win95/i' => 'Windows 95',
            '/win16/i' => 'Windows 3.11',
            '/macintosh|mac os x/i' => 'Mac OS X',
            '/mac_powerpc/i' => 'Mac OS 9',
            '/linux/i' => 'Linux',
            '/ubuntu/i' => 'Ubuntu',
            '/iphone/i' => 'iPhone',
            '/ipod/i' => 'iPod',
            '/ipad/i' => 'iPad',
            '/android/i' => 'Android',
            '/blackberry/i' => 'BlackBerry',
            '/webos/i' => 'Mobile'
         );
         foreach ($os_array as $regex => $value) {
            if (preg_match($regex, $user_agent)) {
                  $os_platform = $value;
            }
         }
         $browser = "Unknown Browser";
         $browser_array = array(
            '/msie/i' => 'Internet Explorer',
            '/firefox/i' => 'Firefox',
            '/safari/i' => 'Safari',
            '/chrome/i' => 'Chrome',
            '/edge/i' => 'Edge',
            '/opera/i' => 'Opera',
            '/netscape/i' => 'Netscape',
            '/maxthon/i' => 'Maxthon',
            '/konqueror/i' => 'Konqueror',
            '/mobile/i' => 'Handheld Browser'
         );
         foreach ($browser_array as $regex => $value) {
            if (preg_match($regex, $user_agent)) {
               $browser = $value;
            }
         }


         $data['country'] = (array)($country);
         $data['city'] = (array) $city;
         $data['area'] = (array)($area);
         $data['code'] = (array)($code);
         $data['long'] =  (array)($long);
         $data['lat'] =  (array)($lat);
         $data['os_platform'] = $os_platform;
         $data['browser'] = $browser;
         $data['ip'] = request()->ip();
         $data['time'] = date('d-m-Y h:i:s A');

         return $data;
      }
   }


   if (!function_exists('check_permission')){
      function check_permission(string $accessPermission ) :bool{
         $status = true;
         if(auth_user()->super_admin == StatusEnum::false->status()){

            $permissions = json_decode(auth_user()->role->permissions,true);
            $permission_values = [];
            foreach ($permissions as $permission) {
               $permission_values = array_merge($permission_values, $permission);
            }
            if(!(in_array($accessPermission ,$permission_values))){
               $status = false;
            }

         }

         return $status;
      }
   }


   if (!function_exists('sidebar_awake')){

      function sidebar_awake(string | array $routes , string $type = null){

         $class = '';
         if((is_array($routes)  && in_array( Route::currentRouteName(), $routes)) || request()->routeIs($routes)  ){
            $class = "active";
            if($type){
               $class = "show";
            }
         }

         return $class;
      }
   }

   if (!function_exists('make_breadcrumbs')){

      function make_breadcrumbs(array $breadcrumbs){

      }

   }



   //update env method
	if (!function_exists('update_env')){
		function update_env(string $str, string $replaceStr) :void{
         $path = base_path('.env');
         if (file_exists($path)) {
            file_put_contents($path, str_replace($str, $replaceStr, file_get_contents($path)));
         }

		}
    }



    if (!function_exists('hexa_to_rgba')){
		function hexa_to_rgba(string $code):string
		{
			list($r, $g, $b) = sscanf($code, "#%02x%02x%02x");
			return  "$r,$g,$b";
		}
	}


   if (!function_exists('imageUrl')){

      function imageUrl(string $file = null, string | null $disk , string $size = null):string
		{
         return FileService::getImageUrl($file , $disk ,$size);
      }

   }



   if (!function_exists('subscription_status')){
		function subscription_status(mixed  $status) :string
		{
         $class = "info";

         $prefixClass = "i-badge ";
         if(request()->routeIs('user.*')){
            $prefixClass ="badge bg-soft-";
         }

         if($status == '1'){
            $status = translate("Running");
            $class = "success";
         }
         elseif($status == '0'){
            $status = translate("Expired");
            $class = "danger";
         }
         else{
            $status = translate("Inactive");
            $class = "warning";
         }


         return "<span class=\"$prefixClass$class\">$status</span>";

		}
   }


   if (!function_exists('log_status')){
		function log_status(mixed  $status) :string
		{
         $class = "info";

         $prefixClass = "i-badge ";
         if(request()->routeIs('user.*')){
            $prefixClass ="badge bg-soft-";
         }

         if($status == '1'){
            $status = translate("Completed");
            $class = "success";
         }
         elseif($status == '0'){
            $status = translate("Pending");
            $class = "warning";
         }
         else{
            $status = translate("Cancel");
            $class = "danger";
         }


         return "<span class=\"$prefixClass$class\">$status</span>";

		}
   }
















